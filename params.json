{
  "name": "Cookiesplease",
  "tagline": "Little script to quickly comply with EU cookie law",
  "body": "![cookiesplease](https://raw.githubusercontent.com/zessx/cookiesplease/master/cookiesplease.png)\r\n\r\nCookiesPlease\r\n=============\r\n\r\nLittle script to quickly comply with EU cookie law.  \r\nIt'll allow you to add a message asking the user is he accepts or not cookies' storage for your website.\r\n\r\nInstallation\r\n------------\r\n\r\nCookiesPlease is available on bower:\r\n\r\n    $ bower install cookiesplease\r\n\r\nIf you're not using bower you still can install it manually, cloning this repository.\r\n\r\nUsage\r\n-----\r\n\r\nSimply include CookiesPlease as **the very first JavaScript** in your `<head>` tag.  \r\nAs it is now self-initialized, you no longer have to call `cookiesplease.init()`.\r\n\r\nCookiesPlease offers you two functions to check if cookies were accepted, or not:\r\n\r\n    if(cookiesplease.wasAccepted()) {\r\n        // Run JS if user has accepted cookies' storage\r\n    } \r\n    if(cookiesplease.wasDeclined()) {\r\n        // Run JS if user has refused cookies' storage\r\n    } \r\n\r\nFurthermore, it'll dispatch an event when user accept/decline cookies. This event allows you to load others scripts without refreshing the page:\r\n\r\n    document.addEventListener('CookiesPleaseAccepted', function() {});\r\n    document.addEventListener('CookiesPleaseDeclined', function() {});\r\n\r\nHere's a common example, defering Google Analytics' loading while user hasn't accepted cookies:\r\n\r\n    <head>\r\n        <script src=\"vendor/cookiesplease/cookiesplease.min.js\"></script>\r\n        <script>\r\n            function loadGoogleAnalytics() {\r\n                (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n                })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\r\n\r\n                ga('create', 'UA-XXXXXXXX-X', 'auto');\r\n                ga('send', 'pageview');\r\n            }\r\n            if(cookiesplease.wasAccepted()) {\r\n                loadGoogleAnalytics();\r\n            }\r\n            document.addEventListener('CookiesPleaseAccepted', loadGoogleAnalytics);\r\n        </script>\r\n    </head>\r\n\r\nOptions\r\n-------\r\n\r\nCookiesPlease comes with a bunch of options:\r\n\r\n| Option                  | Default value     | Usage                                                     |\r\n|-------------------------|-------------------|-----------------------------------------------------------|\r\n| `buttonAccept`          | true              | Show a button to accept cookies' storage                  |\r\n| `buttonDecline`         | false             | Show a button to decline cookies' storage                 |\r\n| `clearCookiesOnDecline` | false             | Remove every stored cookie if user refuse their storage   |\r\n| `storeChoiceOnDecline`  | true              | Remember user's decline (...storing a cookie!!)           |\r\n| `prependToBody`         | false             | If you prefer to add the div at the beginning of `<body>` |\r\n| `buttonAcceptText`      | 'Continue'        | Text used for the accept button                           |\r\n| `buttonDeclineText`     | 'Decline'         | Text used for the decline button                          |\r\n| `message`               | 'This website...' | Message displayed                                         |\r\n\r\nAs it is self-initialiazed, you'll need to declare these options in a variable called `cookiespleaseOptions` (case sensitive) before including the script itself:\r\n\r\n    <script>\r\n        var cookiespleaseOptions = {\r\n            buttonDecline: true,\r\n            prependToBody: true\r\n        };\r\n    </script>\r\n    <script src=\"vendor/cookiesplease/cookiesplease.min.js\"></script>\r\n\r\nWhat about the CSS ?\r\n--------------------\r\n\r\nCookiesPlease has it's own default CSS, but you can easily customize it. Everything is wrapped in the following element :\r\n\r\n    <div id=\"cookiesplease\" class=\"cookiesplease\">\r\n        ...\r\n    </div>\r\n\r\nCookiesPlease's default CSS use the `.cookiesplease` class, to allow you to use `#cookiesplease` id (then avoiding any conflict) :\r\n\r\n<!-- language: lang-css -->\r\n\r\n    #cookiesplease {\r\n        background-color: #eee;\r\n        border-top: 1px solid #222;\r\n        color: #222;\r\n    }\r\n    #cookiesplease p {}\r\n    #cookiesplease a {}\r\n    #cookiesplease button {}\r\n    #cookiesplease .cookiesplease-accept {}\r\n    #cookiesplease .cookiesplease-decline {}\r\n    #cookiesplease.cookiesplease-hidden {}\r\n    body.cookiesplease-shown {}\r\n\r\nPlease note that the `.cookiesplease-shown` is added to the `<body>` element, until the user click on any button. This allows you to customize external elements, for pushing down the body for example.\r\n\r\nLegals\r\n------\r\n- Author : [zessx](https://github.com/zessx)\r\n- Licence : [MIT](http://opensource.org/licenses/MIT) \r\n- Contact : [@zessx](https://twitter.com/zessx)\r\n- Link  : [http://smarchal.com/cookiesplease](http://smarchal.com/cookiesplease)\r\n\r\nDonations\r\n---------\r\n\r\n[![Buy me a coffee !](http://doc.smarchal.com/bmac)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=KTYWBM9HJMMSE&lc=FR&item_name=Buy%20a%20coffee%20to%20zessx%20%28Samuel%20Marchal%29&currency_code=EUR&bn=PP%2dDonationsBF%3abmac%3aNonHosted)\r\n",
  "google": "UA-32364969-9",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}